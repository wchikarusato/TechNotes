
## coffee scriptとは
  AltJS つまりjavascriptの代用品
  javascriptを多用する場合に使う言語
  文法はrubyやpythonに似てるらしい
  
  コンパイルする事でjsファイルが生成される

## 参考URL
  http://qiita.com/MasakatsuNakamura/items/2f8f146daf6cd4bf3877
  http://qiita.com/masakinihirota/items/d5b645d588ebecea5d4f

=  gulpとは
単純なタスクを自動実行してくれる
タスクは gulpfile.coffee で定義される

=  サンプル
-  サンプル用のプロジェクトフォルダを作る
  C:\usr\local\work\の中に testcoffee

-  コマンドプロンプト起動(管理者)して移動
  cd C:\usr\local\work\testcoffee

- npm初期化
  $ npm init
    ->package.jsonファイルが作られる
  $ npm i -D gulp
    ->gulpコマンドが使えるようになる
  $ npm i -D coffee-script
    ->gulpでcoffeescriptが使えるようになる
  $ npm install

- gulpfile.coffeeを作成する
  以下にサンプルを記述する。
  fromフォルダからtoフォルダへファイルを移動させる
  ### gulpfile.coffee ###
  gulp = require 'gulp'

  gulp.task 'default', ->
    gulp.run 'test'

  gulp.task 'test', ->
    gulp.src 'from/*'
      .pipe gulp.dest 'to'

-  ダミーでfromフォルダとtoフォルダを作成する
  fromフォルダの中に適当なファイル test.txt を作成する

- タスク実行してみる
  $ gulp
    ->fromフォルダ内のファイルがtoフォルダ（自動生成される）に移動した事を確認する。
      確認したらtoフォルダを削除する
  $ gulp test
    ->同じくファイルが移動したらok


= gulpfile.coffee の文法解説
https://mae.chab.in/archives/2545

-  gulp.task 'test'
  タスク名を定義する。
  上記により、gulp test でtestタスクが実行される
  ※ つまりタスクの量が増えていくとネスト地獄に陥りやすい

-  gulp.run 'test'
  実行するタスクを定義する
  上記により、defualtタスクを実行したらtestタスクが実行される

-  gulp.src 'from/*'
  実行するコード


= $modal.open
http://qiita.com/bump_of_kiharu/items/b35ae0966f8f7dcbd582
ダイアログで画面を出すのに $modal.open を使用する模様

= selectを作る
  このやり方はcoffeeでなくAngularJS
  http://phiary.me/angularjs-tips-ng-options/
  http://qiita.com/hrfmmymt/items/e3ed8138a3218ad2b794

  $scope.colors = [
    {'name': '青', 'value': 'blue'},
    {'name': '赤', 'value': 'red'},
    {'name': '黄', 'value': 'yellow'}
  ];

  angularjsでは item for item in Array という形で指定する
  <select ng-options="c.name for c in colors>
  と書くと
  <select ng-options="c.name for c in colors">
    <option value="0">青</option>
    <option value="1">赤</option>
    <option value="2">黄</option>
  </select>

  <select ng-options="c.name for c in colors track by c.value>
  と書くとvalueの値がoptionのvalueに入ってくれる
  <select ng-options="c.name for c in colors track by c.value">
    <option value="blue">青</option>
    <option value="red">赤</option>
    <option value="yellow">黄</option>
  </select>
  
-  kanri-internalの例
-- app.coffee
  .success(data)->
    中略
  $scope.orderStatusInfo = data.order_status_info
  
-- user_detail.html
  <select name="user_status_id" ng-options="userStatusId.name for userStatusId in orderStatusInfo track by userStatusId.user_status_id" />
    orderStatusInfo 配列
    userStatusId.name optionの表示
    userStatusId.user_status_id optionのvalueの値

  ->出力結果
  <select name="user_status_id" ng-options="userStatusId.name for userStatusId in orderStatusInfo track by userStatusId.user_status_id" />
    <option value="0" label="未対応">未対応</option>
    <option value="1" label="追客中">追客中</option>
    <option value="2" label="キャンセル">キャンセル</option>
    <option value="3" label="訪問見積もり完了">訪問見積もり完了</option>
    <option value="4" label="返信待ち">返信待ち</option>
    <option value="5" label="予約確定">予約確定</option>
    <option value="6" label="引越し完了">引越し完了</option>
  </select>
  ※このままだとデフォルトの値が設定されない

-  kanri-internalの例(デフォルト設定付き)
  ng-modelにデフォルトで設定する配列のインデックスを設定してやればok

-- app.coffee
  .success(data)->
    中略
	$scope.orderStatusInfo = data.order_status_info
	# ステータスのプルダウン作成
	userStatusArr = data.order_status_info
	if(userStatusArr != null)
		# プルダウンの初期値設定
		userstatus = data.order_reserve_info.status
		for statusmap, i in userStatusArr
			statusname = statusmap.name
			if(userstatus == statusname)
				$scope.userStatusId = $scope.orderStatusInfo[i];
   ※ インデント合わせないとエラーになるので注意
   ->でファンクションを定義する

-- user_detail.html
  <select name="user_status_id" ng-model="userStatusId" ng-options="userStatusId.name for userStatusId in orderStatusInfo track by userStatusId.user_status_id" />


=  submit呼び出し
coms_detail.htmlの例
<button type="button" class="btn btn-primary" ng-click="submit()">保存</button>

-- app.coffee
	modal.open({
	・・・
	}
	中略
	$scope.submit = ()->
		alert('更新を押した\n')
		return
  ->保存ボタンを押すと 更新を押したがダイアログ表示される

